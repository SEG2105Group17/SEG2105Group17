// Generated by view binder compiler. Do not edit!
package com.example.termproject.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.termproject.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityInstructorSelectBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final Button btnAll;

  @NonNull
  public final Button btnBack6;

  @NonNull
  public final Button btnPersonal;

  @NonNull
  public final TextView txtView;

  @NonNull
  public final TextView txtView1;

  private ActivityInstructorSelectBinding(@NonNull ConstraintLayout rootView,
      @NonNull Button btnAll, @NonNull Button btnBack6, @NonNull Button btnPersonal,
      @NonNull TextView txtView, @NonNull TextView txtView1) {
    this.rootView = rootView;
    this.btnAll = btnAll;
    this.btnBack6 = btnBack6;
    this.btnPersonal = btnPersonal;
    this.txtView = txtView;
    this.txtView1 = txtView1;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityInstructorSelectBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityInstructorSelectBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_instructor_select, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityInstructorSelectBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnAll;
      Button btnAll = ViewBindings.findChildViewById(rootView, id);
      if (btnAll == null) {
        break missingId;
      }

      id = R.id.btnBack6;
      Button btnBack6 = ViewBindings.findChildViewById(rootView, id);
      if (btnBack6 == null) {
        break missingId;
      }

      id = R.id.btnPersonal;
      Button btnPersonal = ViewBindings.findChildViewById(rootView, id);
      if (btnPersonal == null) {
        break missingId;
      }

      id = R.id.txtView;
      TextView txtView = ViewBindings.findChildViewById(rootView, id);
      if (txtView == null) {
        break missingId;
      }

      id = R.id.txtView1;
      TextView txtView1 = ViewBindings.findChildViewById(rootView, id);
      if (txtView1 == null) {
        break missingId;
      }

      return new ActivityInstructorSelectBinding((ConstraintLayout) rootView, btnAll, btnBack6,
          btnPersonal, txtView, txtView1);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
